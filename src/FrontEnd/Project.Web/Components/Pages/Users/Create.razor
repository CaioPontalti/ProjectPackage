@page "/user/create"
@attribute [Authorize]
@using Project.Web.Enums
@using Project.Web.Extension

@layout Components.Layout.MainLayout
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject CustomAuthenticationStateProvider AuthProvider
@inject IAccessTokenService AccessTokenService
@inject IUserService UserService
@inject ILogger<Create> Logger

<PageTitle>Log in</PageTitle>
<AuthGuard/>

<MudPaper Elevation="2" Class="pa-6 mx-auto">

    <MudText Typo="Typo.h6" Align="Align.Left" Class="mb-2">
        Criar uma nova conta
    </MudText>

    <div class="col-lg-12">
        @if (Errors.Any())
        {
            @foreach (var error in Errors)
            {
                <MudAlert Severity="Severity.Error" Dense="true" Class="my-1">@error</MudAlert>
            }
        }
        @if (!string.IsNullOrEmpty(MessageSuccess))
        {
            <MudAlert Severity="Severity.Success" Dense="true" Class="my-1">@MessageSuccess</MudAlert>
        }
    </div>

    <EditForm Model="Input" OnValidSubmit="CreateAccountAsync">
        <DataAnnotationsValidator />

        <MudGrid Spacing="2">
            <MudItem xs="12" md="4">
                <MudTextField Label="Nome"
                              For="@(() => Input.Name)"
                              @bind-Value="Input.Name"
                              Variant="Variant.Text"
                              FullWidth="true" />
            </MudItem>

            <MudItem xs="12" md="4">
                <MudTextField Label="Email"
                              For="@(() => Input.Email)"
                              @bind-Value="Input.Email"
                              Variant="Variant.Text"
                              FullWidth="true" />
            </MudItem>

            <MudItem xs="12" md="4">
                <MudSelect T="Roles"
                           Label="Função"
                           @bind-Value="Input.Role"
                           Variant="Variant.Text"
                           FullWidth="true">
                    @foreach (Roles role in Enum.GetValues(typeof(Roles)).Cast<Roles>().OrderBy(r => r.GetDescription()))
                    {
                        <MudSelectItem T="Roles" Value="@role">@role.GetDescription()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            <MudItem xs="12" md="6">
                <MudTextField Label="Senha"
                              For="@(() => Input.Password)"
                              @bind-Value="Input.Password"
                              InputType="InputType.Password"
                              Variant="Variant.Text"
                              FullWidth="true" />
            </MudItem>

            <MudItem xs="12" md="6">
                <MudTextField Label="Confirme a Senha"
                              For="@(() => Input.ConfirmPassword)"
                              @bind-Value="Input.ConfirmPassword"
                              InputType="InputType.Password"
                              Variant="Variant.Text"
                              FullWidth="true" />
            </MudItem>

            <MudItem xs="12" Class="mt-4 d-flex justify-end">
                <MudButton Variant="Variant.Filled"
                           OnClick="HandleClick"
                           Color="Color.Default"
                           Size="Size.Small"
                           Disabled="@isLoading"
                           Style="text-transform: none; transition: 0.2s ease-in-out;">
                    Voltar
                </MudButton>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           ButtonType="ButtonType.Submit"
                           Size="Size.Small"
                           Disabled="@isLoading"
                           Style="margin-left: 8px; text-transform: none; transition: 0.2s ease-in-out;">
                    @if (isLoading)
                    {
                        <MudProgressCircular Color="Color.Primary" Size=Size.Small Indeterminate="true" />
                    }
                    else
                    {
                        <span>
                            Cadastrar
                        </span>
                    }
                </MudButton>
                
            </MudItem>
        </MudGrid>
    </EditForm>

</MudPaper>

@code {
    private bool isLoading = false;
    private readonly List<string> Errors = new List<string>();
    private string MessageSuccess;

    private InputModel Input { get; set; } = new();

    protected override void OnInitialized()
    {
        Input.Role = Roles.User;
    }

    public async Task CreateAccountAsync()
    {
        try
        {
            MessageSuccess = string.Empty;
            isLoading = true;
            Errors.Clear();

            var response = await UserService.CreateUserAsync(Input.Name, Input.Email, Input.Password, Input.Role.ToString());
            if (!response.IsSuccess)
            {
                Errors.AddRange(response.Errors);
                return;
            }

            if (!string.IsNullOrEmpty(response?.Data?.Id))
            {
                MessageSuccess = "Conta criada com sucesso.";
                Input = new();
            }
        }
        catch (Exception ex)
        {
            Errors.Add("Falha ao criar a conta: " + ex.Message);
            Logger.LogError(ex, "An error occurred in the method CreateAccountAsync.");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void HandleClick()
    {
        NavigationManager.NavigateTo("/users", false);
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "O campo 'Nome' é obrigatório!")]
        public string Name { get; set; }

        [Required(ErrorMessage = "O campo 'Email' é obrigatório!")]
        [EmailAddress(ErrorMessage = "E-mail informado é inválido!")]
        public string Email { get; set; }

        [Required(ErrorMessage = "O campo 'Senha' é obrigatória!")]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        [Required(ErrorMessage = "Confirme sua senha!")]
        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "As senhas não coincidem.")]
        public string ConfirmPassword { get; set; }

        [Required(ErrorMessage = "O campo 'Role' é obrigatório!")]
        public Roles Role { get; set; }
    }
}