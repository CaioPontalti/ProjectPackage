@page "/profile/{accountId}"
@attribute [Authorize]

@inject IProfileService ProfileService;
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject ILogger<Profile> Logger
@inject ICepService CepService

<PageTitle>Perfil</PageTitle>
<AuthGuard />

@if (_isLoading)
{
    <MudOverlay Visible="true" DarkBackground="true" ZIndex="9999">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
    </MudOverlay>
}
else
{
    <MudText Typo="Typo.h6" Align="Align.Left" Class="mb-2">
        Perfil
    </MudText>
    <EditForm Model="InputModelProfile" OnValidSubmit="SaveProfile">
        <DataAnnotationsValidator />

        <div class="col-lg-12">
            @if (Errors.Any())
            {
                @foreach (var error in Errors)
                {
                    <MudAlert Severity="Severity.Error" Dense="true" Class="my-1">@error</MudAlert>
                }
            }
            @if (!string.IsNullOrEmpty(MessageSuccess))
            {
                <MudAlert Severity="Severity.Success" Dense="true" Class="my-1">@MessageSuccess</MudAlert>
            }
        </div>

        <MudPaper Elevation="2" Class="pa-6 mx-auto">

            <MudText Typo="Typo.subtitle1"
                     Style="margin-top: -15px;">
                Dados Gerais
            </MudText>

            <MudGrid>

                <MudItem xs="12" md="3">
                    <MudTextField Label="Email"
                                  For="@(() => emailAccount)"
                                  @bind-Value="emailAccount"
                                  Variant="Variant.Text"
                                  FullWidth="true"
                                  Disabled="true" />
                </MudItem>

                <MudItem xs="12" md="3">
                    <MudTextField Label="Nome"
                                  For="@(() => InputModelProfile.Name)"
                                  @bind-Value="InputModelProfile.Name"
                                  Variant="Variant.Text"
                                  FullWidth="true" />
                </MudItem>

                <MudItem xs="12" md="3">
                    <MudTextField Mask="@maskCellPhone"
                                  Label="Telefone"
                                  Placeholder="(00) 00000-0000"
                                  For="@(() => InputModelProfile.CellPhone)"
                                  @bind-Value="InputModelProfile.CellPhone"
                                  Variant="@Variant.Text"
                                  FullWidth="true" />
                </MudItem>

                <MudItem xs="12" md="3">
                    <FixedDatePicker Label="Dt. Nascimento"
                                     @bind-Date="InputModelProfile.BirthDate"
                                     For="@(() => InputModelProfile.BirthDate)"
                                     Mask="00/00/0000"
                                     PickerVariant="PickerVariant.Inline" />
                </MudItem>

            </MudGrid>

            <MudText Typo="Typo.subtitle1"
                     Style="margin-top: 30px;">
                Dados de Endereço
            </MudText>

            <MudGrid >

                <MudItem xs="12" md="2">
                    <MudTextField Mask="@maskPostalCode"
                                  Label="Cep"
                                  Placeholder="00000-000"
                                  Variant="Variant.Text"
                                  FullWidth="true"
                                  Immediate="true"
                                  Value="@InputModelProfile.PostalCode"
                                  TextChanged="OnCepSearch" />
                </MudItem>
                
                <MudItem xs="12" md="4">
                    <MudTextField Label="Endereço"
                                  For="@(() => InputModelProfile.AddressDescription)"
                                  @bind-Value="InputModelProfile.AddressDescription"
                                  Variant="Variant.Text"
                                  FullWidth="true" />
                </MudItem>

                <MudItem xs="12" md="2">
                    <MudTextField Label="Número"
                                  For="@(() => InputModelProfile.Number)"
                                  @bind-Value="InputModelProfile.Number"
                                  Variant="Variant.Text"
                                  FullWidth="true" />
                </MudItem>

                <MudItem xs="12" md="4">
                    <MudTextField Label="Complemento"
                                  For="@(() => InputModelProfile.Complement)"
                                  @bind-Value="InputModelProfile.Complement"
                                  Variant="Variant.Text"
                                  FullWidth="true" />
                </MudItem>

            </MudGrid>

            <MudGrid Style="margin-top: 1px;">
                <MudItem xs="12" md="4">
                    <MudTextField Label="Bairro"
                                  For="@(() => InputModelProfile.Neighborhood)"
                                  @bind-Value="InputModelProfile.Neighborhood"
                                  Variant="Variant.Text"
                                  FullWidth="true" />
                </MudItem>

                <MudItem xs="12" md="4">
                    <MudTextField Label="Cidade"
                                  For="@(() => InputModelProfile.City)"
                                  @bind-Value="InputModelProfile.City"
                                  Variant="Variant.Text"
                                  FullWidth="true" />
                </MudItem>

                <MudItem xs="12" md="4">
                    <MudTextField Label="Estado"
                                  For="@(() => InputModelProfile.State)"
                                  @bind-Value="InputModelProfile.State"
                                  Variant="Variant.Text"
                                  FullWidth="true" />
                </MudItem>


            </MudGrid>
            <MudItem xs="12" Class="mt-4 d-flex justify-end">
                <MudButton Class="mt-4"
                           Color="Color.Primary"
                           Disabled="@_isLoadingSaveButton"
                           Style="text-transform: none; transition: 0.2s ease-in-out;"
                           ButtonType="ButtonType.Submit">
                    @if (_isLoadingSaveButton)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                    }
                    else
                    {
                        <span>Salvar</span>
                    }
                </MudButton>
            </MudItem>

        </MudPaper>

    </EditForm>
}

@code {
    [Parameter]
    public string accountId { get; set; }
    private bool _isLoading = true;
    private bool _isLoadingSaveButton = false;
    private InputModelAccountProfile InputModelProfile = null;

    private readonly List<string> Errors = new List<string>();

    private string MessageSuccess;
    private string emailAccount = string.Empty;

    private readonly PatternMask maskCellPhone = new PatternMask("(##) #####-####")
    {
        MaskChars = new[] { new MaskChar('#', @"[0-9]") }
    };

    private readonly PatternMask maskPostalCode = new PatternMask("#####-###")
    {
        MaskChars = new[] { new MaskChar('#', @"[0-9]") }
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var state = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = state.User;
            if (user.Identity.IsAuthenticated)
                emailAccount = user.FindFirst(ClaimTypes.Email)?.Value;

            var response = await ProfileService.GetByIdAsync(accountId);
            if (!response.IsSuccess)
            {
                Errors.AddRange(response.Errors);
                return;
            }

            if (response.Data.Profile is not null)
            {
                InputModelProfile = new();
                InputModelProfile = (InputModelAccountProfile)response.Data.Profile;
            }
        }
        catch (UnauthorizedAccessException ex)
        {
            Logger.LogError(ex, "An error occurred in the method OnInitializedAsync.");
            NavigationManager.NavigateTo("/auth/login", true);
        }
        catch (Exception ex)
        {
            Errors.Add(ex.Message);
            Logger.LogError(ex, "An error occurred in the method OnInitializedAsync.");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnCepSearch(string e)
    {
        InputModelProfile.PostalCode = e;
        StateHasChanged();
        if (e.Length >= 9)
        {
            var address = await CepService.SearchByPostalCode(e);
            if (address is not null)
            {
                InputModelProfile.AddressDescription = address.AddressDescription;
                InputModelProfile.Neighborhood = address.Neighborhood;
                InputModelProfile.City = address.City;
                InputModelProfile.State = address.State;
            }
        }
    }

    public async Task SaveProfile()
    {
        try
        {
            _isLoadingSaveButton = true;
            MessageSuccess = string.Empty;
            Errors.Clear();

            var requestObject = RequestObjectBuild(InputModelProfile);

            var response = await ProfileService.UpdateAsync(requestObject);
            if (!response.IsSuccess)
            {
                Errors.AddRange(response.Errors);
                return;
            }

            MessageSuccess = "Perfil Atualizado com sucesso.";
        }
        catch (UnauthorizedAccessException ex)
        {
            Logger.LogError(ex, "An error occurred in the method SaveProfile.");
            NavigationManager.NavigateTo("/auth/login", true);
        }
        catch (Exception ex)
        {
            Errors.Add("Falha ao atualizar o Perfil: " + ex.Message);
            Logger.LogError(ex, "An error occurred in the method SaveProfile.");
        }
        finally
        {
            _isLoadingSaveButton = false;
        }
    }

    private DTOs.Response.Profile.GetByAccountId.Profile RequestObjectBuild(InputModelAccountProfile input)
    {
        var profile = new DTOs.Response.Profile.GetByAccountId.Profile();
        profile.Id = input.Id;
        profile.Name = input.Name;
        profile.BirthDate = input.BirthDate;
        profile.CellPhone = input.CellPhone;

        profile.Address = new Address();
        profile.Address.PostalCode = input.PostalCode;
        profile.Address.AddressDescription = input.AddressDescription;
        profile.Address.Number = input.Number;
        profile.Address.Complement = input.Complement;
        profile.Address.Neighborhood = input.Neighborhood;
        profile.Address.City = input.City;
        profile.Address.State = input.State;

        return profile;
    }

    public class InputModelAccountProfile
    {
        [Required(ErrorMessage = "*Obrigatório")]
        public string Id { get; set; }

        [Required(ErrorMessage = "*Obrigatório")]
        public string Name { get; set; }

        [Required(ErrorMessage = "*Obrigatório")]
        public DateTime? BirthDate { get; set; }

        [Required(ErrorMessage = "*Obrigatório")]
        public string PostalCode { get; set; }

        [Required(ErrorMessage = "*Obrigatório")]
        public string AddressDescription { get; set; }

        [Required(ErrorMessage = "*Obrigatório")]
        public int? Number { get; set; }

        [Required(ErrorMessage = "*Obrigatório")]
        public string State { get; set; }

        [Required(ErrorMessage = "*Obrigatório")]
        public string City { get; set; }

        [Required(ErrorMessage = "*Obrigatório")]
        public string Neighborhood { get; set; }

        public string Complement { get; set; }

        [Required(ErrorMessage = "*Obrigatório")]
        public string CellPhone { get; set; }

        public static explicit operator InputModelAccountProfile(DTOs.Response.Profile.GetByAccountId.Profile profile)
        {
            var inputProfile = new InputModelAccountProfile();
            inputProfile.Id = profile.Id;
            inputProfile.Name = profile.Name;
            inputProfile.BirthDate = profile.BirthDate;
            inputProfile.PostalCode = profile?.Address?.PostalCode;
            inputProfile.AddressDescription = profile?.Address?.AddressDescription;
            inputProfile.Number = profile?.Address?.Number;
            inputProfile.State = profile?.Address?.State;
            inputProfile.City = profile?.Address?.City;
            inputProfile.Neighborhood = profile?.Address?.Neighborhood;
            inputProfile.Complement = profile?.Address?.Complement;
            inputProfile.CellPhone = profile.CellPhone;

            return inputProfile;
        }
    }
}