@page "/"
@rendermode InteractiveServer
@attribute [Authorize]

@inject IAccessTokenService AccessTokenService
@inject NavigationManager Navigation
@inject CustomAuthenticationStateProvider AuthProvider
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Home</PageTitle>
<AuthGuard/>

@* <MudPaper Elevation="1" Class="pa-1 mx-auto">

    <MudText Typo="Typo.h6" GutterBottom="true">@TokenExpiredTime()</MudText>

</MudPaper> *@

<style>
    .donut-total-label {
    fill: var(--mud-palette-text-primary);
}
</style>

<MudPaper Elevation="1" Class="pa-2 mx-auto">
 <MudText Typo="Typo.h6" GutterBottom="true">Meus Projetos</MudText>
    <MudGrid >
        @for (int i = 1; i < 5; i++)
        {
            <MudItem xs="12" sm="6" md="2">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Projeto</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText>This day everything happened.</MudText>
                        <MudText Typo="Typo.body2">The quick, brown fox jumps over a lazy dog.</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Primary">Read more</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
            }
    </MudGrid>
</MudPaper>

<MudGrid>
    <MudItem xs="12" sm="6" md="4">
        <MudPaper Elevation="1" Class="pa-2 mx-auto" Style="margin-top:10px;">
            <MudGrid>
                <MudItem xs="12">
                    <MudText Typo="Typo.h6" GutterBottom="true">Minhas horas</MudText>
                    <MudChart ChartType="ChartType.Donut"
                              Width="180px"
                              Height="180px"
                              InputData="@data"
                              InputLabels="@labels"
                              @bind-SelectedIndex="Index">
                        <CustomGraphics>
                            <text class="donut-total-label" x="50%" y="35%" dominant-baseline="middle" text-anchor="middle" font-family="Helvetica" font-size="3">Total</text>
                            <text class="donut-total-label" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="6">@data.Sum().ToString()</text>
                        </CustomGraphics>     
                    </MudChart>
                    <MudText Typo="Typo.body2" Align="Align.Center" >
                        <span><strong>@labels[Index]</strong></span>: <span>@data[Index].ToString() horas</span>
                    </MudText>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
</MudGrid>



@code{

    private bool isLoading = false;
    private DateTime tokenExpired { get; set; }
    public DateTime currentTime { get; set; }
    private Timer timer;
    private DateTime dateDif { get; set; }

    private int Index = 0;
    public double[] data = { 25, 75, 20, 5 };
    public string[] labels = { "QA", "Development", "Documentation", "Analysis" };

    protected override async Task OnInitializedAsync()
    {
        await InitialValues();

        timer = new Timer(UpdateClock, null, 0, 1000); 
    }

    private async Task Logout()
    {
        isLoading = true;
        AuthProvider.MarkUserAsLoggedOut();
        await AccessTokenService.RemoveTokenAsync();

        Navigation.NavigateTo("/auth/login");
    }

    private async Task InitialValues()
    {
        var state = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = state.User;
        if (user.Identity.IsAuthenticated)
        {

            var expires = user.Claims.FirstOrDefault(x => x.Type == JwtRegisteredClaimNames.Exp).Value;
            if(long.TryParse(expires, out var exp))
            {
                tokenExpired = DateTimeOffset.FromUnixTimeSeconds(exp).LocalDateTime;
            }
        }
    }

    private void UpdateClock(object state)
    {
        // Update current time
        currentTime = DateTime.Now;

        // Trigger UI update
        InvokeAsync(StateHasChanged);
    }

    private string TokenExpiredTime()
    {
        TimeSpan restante = tokenExpired - currentTime;

        if (restante <= TimeSpan.Zero)
            return $"Sua sessão expirou. Faça login novamente para continuar navegando.";
        
        var hora = new TimeOnly(restante.Hours, restante.Minutes, restante.Seconds);
            return $"Faltam {hora.Hour}:{hora.Minute}:{hora.Second} para sua sessão expirar";
    }
}