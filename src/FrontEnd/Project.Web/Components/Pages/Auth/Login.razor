@page "/auth/login"

@layout Components.Layout.MainLayoutAuth
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject CustomAuthenticationStateProvider AuthProvider
@inject IAccessTokenService AccessTokenService
@inject ILogger<Login> Logger


<PageTitle>Log in</PageTitle>

<MudContainer MaxWidth="MaxWidth.False"
              Class="pa-6 px-4 px-sm-6 px-md-8"
              Style="max-width: 500px; width: 100%;">

    <MudPaper Elevation="2"
              Class="pa-6"
              Style="border-radius: 8px;">

        <MudText Typo="Typo.h5"
                 Align="Align.Center"
                 Class="mb-2">
            Bem-vindo
        </MudText>

        <MudText Typo="Typo.body2"
                 Align="Align.Center"
                 Style="color: #7f8c8d;">
            Informe seus dados para entrar na plataforma
        </MudText>

        <MudDivider Class="my-3" />

        @if (Errors?.Any() == true)
        {
            @foreach (var error in Errors)
            {
                <MudAlert Severity="Severity.Error" Dense="true" Class="my-1">@error</MudAlert>
            }
        }

        <EditForm Model="Input" OnValidSubmit="LoginUserAsync">
            <DataAnnotationsValidator />

            <MudGrid Spacing="2">
                <MudItem xs="12">
                    <MudTextField Label="Email"
                                  For="@(() => Input.Email)"
                                  @bind-Value="Input.Email"
                                  Variant="Variant.Outlined"
                                  FullWidth="true"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Email"
                                  UserAttributes="@(new() { { "autocomplete", "email" }, { "aria-required", "true" } })" />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField Label="Senha"
                                  Class="mb-0"
                                  For="@(() => Input.Password)"
                                  @bind-Value="Input.Password"
                                  InputType="InputType.Password"
                                  Variant="Variant.Outlined"
                                  FullWidth="true"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Lock"
                                  UserAttributes="@(new() { { "autocomplete", "current-password" }, { "aria-required", "true" } })" />
                </MudItem>

                <MudItem xs="12" Class="d-flex justify-end" Style="margin-top: -10px;">
                    <MudLink Href="Account/ForgotPassword"
                             Style="cursor:pointer;"
                             Class="hover-underline"
                             Color="Color.Inherit">
                        <MudText Typo="Typo.caption"
                                 Style="color: #7f8c8d;">
                            Esqueceu sua senha?
                        </MudText>
                    </MudLink>
                </MudItem>

                <MudItem xs="12">
                    <MudButton Variant="Variant.Filled"
                               Class="mt-4"
                               Color="Color.Primary"
                               Type="Submit"
                               FullWidth="true"
                               Disabled="@isLoading"
                               Style="text-transform: none; transition: 0.2s ease-in-out;"
                               ButtonType="ButtonType.Submit"
                               Size="Size.Medium">
                        @if (isLoading)
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                        }
                        else
                        {
                            <span>Login</span>
                        }
                    </MudButton>
                </MudItem>
            </MudGrid>
        </EditForm>

        <MudDivider Class="my-3" />

        <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Spacing="1">
            @* <MudLink Href="user/create"
                     Class="hover-underline"
                     Style="cursor:pointer;"
                     Color="Color.Inherit">
                <MudText Typo="Typo.body2" Style="color: #7f8c8d;">Criar uma Conta</MudText>
            </MudLink> *@
            
            <MudLink Href="Account/ResendEmailConfirmation"
                     Class="hover-underline"
                     Style="cursor:pointer;"
                     Color="Color.Inherit">
                <MudText Typo="Typo.body2" Style="color: #7f8c8d;">Reenviar e-mail de confirmação</MudText>
            </MudLink>
        </MudStack>

    </MudPaper>
</MudContainer>


@code {
    private bool isLoading = false;
    private readonly List<string> Errors = new List<string>();
    private InputModel Input { get; set; } = new();

    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    public async Task LoginUserAsync()
    {
        try
        {
            isLoading = true;
            Errors.Clear();

            var result = await AuthService.LoginAsync(Input.Email, Input.Password);

            if (!result.IsSuccess)
            {
                Errors.AddRange(result.Errors);
                return;
            }

            if (!result.Data.Account.IsActive)
            {
                Errors.Add("O usuário está inativo. Entre em contato com o administrador");
                return;
            }

            await AccessTokenService.RemoveTokenAsync();
            await AccessTokenService.SetTokenAsync(result.Data.Token);

            AuthProvider.MarkUserAsAuthenticated(result.Data.Token);

            NavigationManager.NavigateTo(ReturnUrl ?? "/", true);
        }
        catch (Exception ex)
        {
            Errors.Add("Falha ao fazer login: " + ex.Message);
            Logger.LogError(ex, "An error occurred in the method LoginUserAsync.");
        }
        finally
        {
            isLoading = false;
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "*Obrigatório")]
        [EmailAddress(ErrorMessage = "E-mail informado é inválido!")]
        public string Email { get; set; }

        [Required(ErrorMessage = "*Obrigatório")]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}