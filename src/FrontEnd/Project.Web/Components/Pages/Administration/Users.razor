@page "/administration/users"
@attribute [Authorize]

@inject IUserService UserService
@inject ILogger<Users> Logger

<PageTitle>Usuários</PageTitle>
<AuthGuard />

<div class="col-lg-12">
    @if (Errors.Any())
    {
        @foreach (var error in Errors)
        {
            <MudAlert Severity="Severity.Error" Dense="true" Class="my-1">@error</MudAlert>
        }
    }
</div>
<MudTable @ref="_tableRef"
          ServerData="LoadServerDataAsync"
          Dense="@dense"
          Hover="@hover"
          Bordered="@bordered"
          Striped="@striped"
          @bind-SelectedItem="selectedItem">

    <ToolBarContent>
        <MudFab Color="Color.Primary"
                Size="Size.Small"
                StartIcon="@Icons.Material.Filled.Add" 
                Style="margin-right:10px;"/>

        <MudText Typo="Typo.h6">Usuários</MudText>
        <MudSpacer />
        
        <MudTextField @bind-Value="searchInput"
                      @onkeyup="HandleKeyUp"
                      Placeholder="Search"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium"
                      Class="mt-0" />
    </ToolBarContent>

    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>E-mail</MudTh>
        <MudTh>Dt. Cadastro</MudTh>
        <MudTh>Status</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="E-mail">@context.Email</MudTd>
        <MudTd DataLabel="DtCadastro">@context.CreatedDate</MudTd>
        <MudTd DataLabel="Status">@(context.IsActive ? "Ativo" : "Inativo")</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 5, 10, 15, int.MaxValue }"
                       RowsPerPageString="@rowsPerPageString"
                       InfoFormat="@infoFormat"
                       AllItemsText="@allItemsText"
                       HorizontalAlignment="@horizontalAlignment"
                       HideRowsPerPage="@hideRowsPerPage"
                       HidePageNumber="@hidePageNumber"
                       HidePagination="@hidePagination" />
    </PagerContent>
</MudTable>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Value="hover" Color="Color.Primary">Hover</MudSwitch>
    <MudSwitch @bind-Value="dense" Color="Color.Secondary">Dense</MudSwitch>
    <MudSwitch @bind-Value="striped" Color="Color.Tertiary">Striped</MudSwitch>
    <MudSwitch @bind-Value="bordered" Color="Color.Warning">Bordered</MudSwitch>
    <MudSpacer />
    <div style="min-width:200px;">
        <MudText>Selected: @selectedItem?.Name</MudText>
    </div>
</div>

@code {
    private bool dense = true;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string search = string.Empty;  // usado para filtro real
    private string searchInput = string.Empty;    // usado para manter o valor digitado
    private User selectedItem = null;
    private MudTable<User> _tableRef;
    private readonly List<string> Errors = new List<string>();

    private HorizontalAlignment horizontalAlignment = HorizontalAlignment.Right;
    private bool hidePageNumber;
    private bool hidePagination;
    private bool hideRowsPerPage;
    private readonly string rowsPerPageString = "Itens por pagina";
    private readonly string infoFormat = "{first_item}-{last_item} of {all_items}";
    private readonly string allItemsText = "Todos";

    private async Task OnSearchChanged(string value)
    {
        searchInput = value;
    }

    private async Task HandleKeyUp(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            search = searchInput;
            await _tableRef.ReloadServerData();
        }
    }

    private async Task<TableData<User>> LoadServerDataAsync(TableState state, CancellationToken cancellationToken)
    {
        try
        {
            var response = await UserService.GetAllAsync(state.Page, state.PageSize, search);

            if (!response.IsSuccess)
            {
                Errors.AddRange(response.Errors);
                StateHasChanged();
                return null;
            }

            return new TableData<User>
            {
                Items = response.Data.Users,
                TotalItems = response.Data.TotalItems
            };
        }
        catch (Exception ex)
        {
            Errors.Add(ex.Message);
            Logger.LogError(ex, "An error occurred in the method LoadServerDataAsync.");
            StateHasChanged();
            return null;
        }
    }
}