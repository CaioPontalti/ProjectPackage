@inherits LayoutComponentBase

@inject IAccessTokenService AccessTokenService
@inject NavigationManager Navigation
@inject CustomAuthenticationStateProvider AuthProvider
@inject AuthenticationStateProvider AuthStateProvider

@if (_isAuthorization)
{
    <MudThemeProvider @bind-IsDarkMode="_isDarkMode" />
    <MudPopoverProvider />
    <MudDialogProvider />
    <MudSnackbarProvider />
    <MudLayout>
        <MudAppBar Elevation="1" Dense="true">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" OnClick="@ToggleDrawer" Edge="Edge.Start" />
            <MudText Typo="Typo.h6" Class="ml-2">Projeto Blazor MudJWT</MudText>
            <MudSpacer />

            <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />

            <MudMenu Icon="@Icons.Material.Filled.Settings"
                     Color="Color.Inherit"
                     Dense="true"
                     AnchorOrigin="Origin.TopRight"
                     TransformOrigin="Origin.TopRight">
                <MudMenuItem >Perfil</MudMenuItem>
                <MudMenuItem >Configurações</MudMenuItem>
                <MudMenuItem OnClick="Logout">Sair</MudMenuItem>
            </MudMenu>
            
        </MudAppBar>

        <MudDrawer @bind-Open="_drawerOpen" Elevation="1" ClipMode="DrawerClipMode.Always">
            <NavMenu />
        </MudDrawer>

        <MudMainContent Class="mt-4 px-4">
            @Body
        </MudMainContent>
    </MudLayout>
}

@code {
    private bool _isDarkMode = false;
    private const string DARK_MODE = "Dark";
    private bool _drawerOpen = true;
    private bool _isAuthorization { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            var theme = user.FindFirst("Theme")?.Value;
            _isDarkMode = theme == DARK_MODE;

            _isAuthorization = true;
        }
        else
        {
            _isAuthorization = false;
            Navigation.NavigateTo("/auth/login");
        }

    }

    private void ToggleDrawer()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;

        var dark = _isDarkMode;
    }

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };

    private async Task Logout()
    {
        AuthProvider.MarkUserAsLoggedOut();
        await AccessTokenService.RemoveTokenAsync();

        Navigation.NavigateTo("/auth/login");
    }
}
