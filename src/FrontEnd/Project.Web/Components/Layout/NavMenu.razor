@using System.Security.Claims
@using Project.Web.Enums
@using Project.Web.Enums.Account
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudNavMenu>
    <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Dashboard">Dashboard</MudNavLink>

    <MudNavGroup Title="Workspace" Icon="@Icons.Material.Filled.Workspaces">
        <MudNavLink Href="cars" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.List">Projetos</MudNavLink>
        <MudNavLink Href="sprints" Icon="@Icons.Material.Filled.Build">Sprints</MudNavLink>
        <MudNavLink Href="categories" Icon="@Icons.Material.Filled.Category">Categorias</MudNavLink>
    </MudNavGroup>

    <MudNavGroup Title="Relatórios" Icon="@Icons.Material.Filled.Equalizer">
        <MudNavLink Href="cars" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.List">Projetos</MudNavLink>
        <MudNavLink Href="sprints" Icon="@Icons.Material.Filled.Build">Sprints</MudNavLink>
        <MudNavLink Href="categories" Icon="@Icons.Material.Filled.Category">Categorias</MudNavLink>
    </MudNavGroup>

    @if (adminRole == Roles.Admin.ToString())
    {
        <MudNavGroup Title="Administração" Icon="@Icons.Material.Filled.AdminPanelSettings">
            <MudNavLink Href="/accounts" Icon="@Icons.Material.Filled.SwitchAccount">Contas</MudNavLink>
            <MudNavLink Href="/squads" Icon="@Icons.Material.Filled.People">Squads</MudNavLink>
        </MudNavGroup>
    }
</MudNavMenu>

    @code{

    private string adminRole;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            adminRole = user.FindFirst(ClaimTypes.Role)?.Value;
        }
    }

}