@using MudBlazor
@using System.Linq.Expressions

<MudDatePicker Date="@_internalDate"
               DateChanged="OnDateChanged"
               Label="@Label"
               For="@For"
               Variant="@Variant"
               PickerVariant="@PickerVariant"
               DateFormat="@DateFormat"
               Mask="@(new PatternMask("00/00/0000"))"
               Disabled="@Disabled"
               Required="@Required"
               Class="@Class"
               Style="@Style"
               MinDate="@MinDate"
               MaxDate="@MaxDate"
               Placeholder="@Placeholder"/>

@code {
    private DateTime? _internalDate;

    [Parameter] public DateTime? Date { get; set; }
    [Parameter] public EventCallback<DateTime?> DateChanged { get; set; }

    [Parameter] public Expression<Func<DateTime?>> For { get; set; }

    [Parameter] public string Label { get; set; }
    [Parameter] public Variant Variant { get; set; } = Variant.Text;
    [Parameter] public PickerVariant PickerVariant { get; set; } = PickerVariant.Inline;
    [Parameter] public string Placeholder { get; set; } = "dd/mm/aaaa";
    [Parameter] public string DateFormat { get; set; } = "dd/MM/yyyy";
    [Parameter] public string Mask { get; set; } = null;
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public bool Required { get; set; } = false;
    [Parameter] public string Class { get; set; }
    [Parameter] public string Style { get; set; }
    [Parameter] public DateTime? MinDate { get; set; }
    [Parameter] public DateTime? MaxDate { get; set; }

    protected override void OnParametersSet()
    {
        _internalDate = Date;
    }

    private async Task OnDateChanged(DateTime? newDate)
    {
        _internalDate = newDate;
        await DateChanged.InvokeAsync(newDate);
    }
}
